---
import Layout from '../../../../layouts/Layout.astro';
import { getBackend } from '@/lib/backend';
import { isFsMode } from '@/lib/isFsMode';

export const prerender = false;

const lang = (Astro.params?.lang as string) || 'en';
const backend = getBackend();

// -- Auth: σε FS mode είσαι πάντα logged-in (demo). Αλλιώς έλεγχος session.
let user: { id: string } | null = null;
if (isFsMode()) {
  user = { id: 'demo-user' };
} else {
  const session = await backend.auth.getSession();
  if (!session.userId) {
    return Astro.redirect(`/${lang}/login`);
  }
  user = { id: session.userId };
}

// -- Φόρτωση άρθρων ΜΕΣΩ adapter (όχι supabase.from)
const articles = await backend.articles.list({
  language: lang,
  includeDrafts: true, // να βλέπεις drafts/scheduled στην προεπισκόπηση
});

// === helpers ===
function getStatus(a: any) {
  // FS mode Article: { status: 'draft'|'scheduled'|'published', publishDate }
  // Backends τύπου Supabase: είχε published + publish_date
  const status = a.status ?? (a.published ? 'published' : 'draft');
  const dateStr = a.publishDate ?? a.publish_date;
  const date = dateStr ? new Date(dateStr) : null;

  if (status === 'draft') return 'draft';
  if (status === 'scheduled') {
    if (date && date > new Date()) return 'scheduled';
    return 'published';
  }
  if (status === 'published') return 'published';

  // fallback για παλιό σχήμα
  if (!a?.published) return 'draft';
  if (date && date > new Date()) return 'scheduled';
  return 'published';
}

function getLangFlag(l: string) {
  const v = (l || '').toLowerCase();
  return v === 'en' ? '🇬🇧'
    : v === 'nl' ? '🇳🇱'
    : v === 'el' ? '🇬🇷'
    : v === 'fr' ? '🇫🇷'
    : v === 'de' ? '🇩🇪'
    : '';
}
---

<Layout title="Προεπισκοπήσεις Άρθρων" user={user} lang={lang}>
  <main class="max-w-6xl mx-auto px-4 py-16">
    <h1 class="text-2xl font-bold mb-8">📋 Όλα τα άρθρα</h1>

    {articles?.length === 0 ? (
      <p class="text-zinc-500 text-center">Δεν υπάρχουν άρθρα.</p>
    ) : (
      <div class="space-y-6">
        {articles.map((article: any) => {
          const al = article.language ?? article.lang ?? lang;
          const publishStr = article.publishDate ?? article.publish_date ?? null;
          const publishHuman = publishStr
            ? new Date(publishStr).toLocaleString('el-GR')
            : '—';

          return (
            <div
              class="p-4 border rounded shadow-sm flex items-center justify-between"
              key={article.id ?? article.slug}
            >
              <div>
                <h2 class="text-lg font-semibold">{article.title}</h2>
                <p class="text-sm text-zinc-500">
                  🗓️ {publishHuman} | 🏷️ {getLangFlag(al)} | 📌{' '}
                  {getStatus(article) === 'draft' && '📝 Πρόχειρο'}
                  {getStatus(article) === 'scheduled' && '⏳ Προγραμματισμένο'}
                  {getStatus(article) === 'published' && '✅ Δημοσιευμένο'}
                </p>

                <pre class="text-xs bg-gray-100 text-gray-800 mt-2 p-2 rounded max-w-md">
slug: {article.slug}
                </pre>
              </div>

              <div class="flex gap-3">
                {article.slug && (
                  <>
                    <a
                      href={`/${al}/blog/${article.slug}`}
                      class="text-sm text-blue-600 hover:underline"
                    >
                      👁️ Προβολή
                    </a>
                    <a
                      href={`/${al}/admin/edit/${article.slug}`}
                      class="text-sm text-green-600 hover:underline"
                    >
                      ✏️ Επεξεργασία
                    </a>
                  </>
                )}
              </div>
            </div>
          );
        })}
      </div>
    )}
  </main>
</Layout>

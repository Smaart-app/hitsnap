---
import Layout from '@layouts/Layout.astro';
import { createServerClientAstro } from '@lib/createServerClient.ts';

export const prerender = false;

const { slug } = Astro.params;
const supabase = createServerClientAstro(Astro.cookies);

console.log('[EDITOR] Incoming slug param:', slug);

// Έλεγχος αν είναι συνδεδεμένος ο χρήστης
const {
  data: { user },
} = await supabase.auth.getUser();

const lang = Astro.params?.lang || 'el';

if (!user) {
  return Astro.redirect(`/${lang}/login`);
}

if (!slug) {
  console.warn('[EDITOR] Missing slug param!');
  return Astro.redirect('/404');
}

// ✅ ΝΕΟ QUERY: χωρίς φίλτρα user_id ή lang, για υποστήριξη draft χωρίς metadata
const { data, error: fetchError } = await supabase
  .from('articles')
  .select('*')
  .eq('slug', slug)
  .maybeSingle();

console.log('[EDITOR] Supabase query result:', data);
console.log('[EDITOR] Supabase error:', fetchError);

if (fetchError || !data) {
  console.warn('[EDITOR] Article not found or Supabase error occurred');
  return Astro.redirect('/404');
}

const article = data;
const isGreek = article?.lang === 'el';
---

<Layout title={`${isGreek ? 'Επεξεργασία Άρθρου' : 'Edit Article'} | Hitlift`} lang={article?.lang || 'el'} user={user}>
  <main class="max-w-6xl mx-auto px-4 py-12">
    <div class="flex items-center justify-between mb-6">
      <h1 class="text-2xl font-bold">{isGreek ? '✏️ Επεξεργασία Άρθρου' : '✏️ Edit Article'}</h1>
      <a href={`/${article.lang || 'el'}/preview/${article.slug}`} 
         class="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 transition text-sm font-semibold"
         target="_blank">
        👁️ Προεπισκόπηση
      </a>
    </div>

    {import.meta.env.MODE === 'development' && (
      <details class="mb-4">
        <summary class="text-xs cursor-pointer bg-zinc-100 p-2 border rounded">🔍 Debug Info (Click to expand)</summary>
        <pre class="text-xs bg-zinc-100 p-2 border rounded overflow-auto max-h-64 mt-2">{JSON.stringify(article, null, 2)}</pre>
      </details>
    )}

    <div id="feedback"></div>

    <div class="grid lg:grid-cols-2 gap-8">
      <form method="post" action="/api/save-article" class="space-y-4" id="articleForm">
        <input type="hidden" name="slug" value={article?.slug || ''} />
        <input type="hidden" name="id" value={article?.id || ''} />

        <div>
          <label class="block mb-1 font-semibold">Τίτλος</label>
          <input type="text" name="title" class="w-full p-2 border rounded" value={article?.title || ''} required />
        </div>

        <div>
          <label class="block mb-1 font-semibold">Απόσπασμα</label>
          <textarea name="excerpt" class="w-full p-2 border rounded" rows="3">{article?.excerpt || ''}</textarea>
        </div>

        <div>
          <label class="block mb-1 font-semibold">Περιεχόμενο (Markdown)</label>
          <textarea name="content" id="markdownInput" class="w-full p-2 border rounded font-mono text-sm" rows="12">{article?.content || ''}</textarea>
        </div>

        <div>
          <label class="block mb-1 font-semibold">Εικόνα Εξωφύλλου</label>
          <input type="url" name="cover_image" class="w-full p-2 border rounded" value={article?.cover_image || ''} />
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block mb-1 font-semibold">Ημερομηνία Δημοσίευσης</label>
            <input type="datetime-local" name="publish_date" class="w-full p-2 border rounded"
              value={article?.publish_date?.slice(0, 16) || ''} />
          </div>
          <div>
            <label class="block mb-1 font-semibold">Κατάσταση</label>
            <select name="published" class="w-full p-2 border rounded">
              <option value="false" selected={!article?.published}>📝 Πρόχειρο</option>
              <option value="true" selected={article?.published}>✅ Δημοσιευμένο</option>
            </select>
          </div>
        </div>

        <div class="flex gap-4">
          <button type="submit" class="bg-[#50c7c2] text-white px-6 py-2 rounded font-semibold hover:bg-[#45b3ae] transition">
            💾 Αποθήκευση
          </button>
          <a href={`/${article.lang || 'el'}/blog`} 
             class="bg-gray-500 text-white px-6 py-2 rounded font-semibold hover:bg-gray-600 transition">
            ← Ακύρωση
          </a>
        </div>
      </form>

      <section class="prose prose-zinc dark:prose-invert p-4 border rounded shadow-sm overflow-auto max-h-[800px]">
        <h2 class="text-xl font-bold mb-2">{isGreek ? 'Προεπισκόπηση' : 'Preview'}</h2>
        <div id="previewImageContainer">
          {article?.cover_image && (
            <img src={article.cover_image} alt="cover" class="mb-4 rounded shadow max-h-64 w-full object-cover" />
          )}
        </div>
        <div id="markdownPreview" class="text-sm text-zinc-800 dark:text-zinc-200"></div>
        <div id="translationPreview" class="mt-8 border-t pt-4 hidden">
          <h3 class="font-semibold mb-2">{isGreek ? 'Αγγλική Μετάφραση' : 'English Translation'}</h3>
          <div id="translatedMarkdown" class="text-sm text-zinc-800 dark:text-zinc-200"></div>
        </div>
      </section>
    </div>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script type="module">
    const input = document.getElementById('markdownInput');
    const preview = document.getElementById('markdownPreview');
    const translated = document.getElementById('translatedMarkdown');
    const previewContainer = document.getElementById('translationPreview');

    function renderMarkdown(text, target) {
      target.innerHTML = marked.parse(text);
    }

    input.addEventListener('input', async () => {
      renderMarkdown(input.value, preview);

      const lang = document.documentElement.lang || 'el';
      const isGreek = lang === 'el';

      try {
        const response = await fetch('https://api.mymemory.translated.net/get?q=' +
          encodeURIComponent(input.value.slice(0, 500)) +
          '&langpair=' + (isGreek ? 'el|en' : 'en|el'));

        const data = await response.json();
        if (data?.responseData?.translatedText) {
          previewContainer.classList.remove('hidden');
          renderMarkdown(data.responseData.translatedText, translated);
        }
      } catch (err) {
        console.warn('Translation failed:', err);
      }
    });

    // Αρχική απόδοση
    renderMarkdown(input.value, preview);
  </script>
</Layout>
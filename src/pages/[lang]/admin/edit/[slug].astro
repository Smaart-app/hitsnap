---
import Layout from '@layouts/Layout.astro';
import { createServerClientWithCookies } from '@lib/createServerClient';

export const prerender = false;

const { slug, lang } = Astro.params;

if (!slug || typeof slug !== 'string') {
  return new Response('⛔ Invalid slug', { status: 400 });
}

const supabase = createServerClientWithCookies(Astro.cookies);

const [
  { data: { user }, error: userError },
  { data: article, error: articleError },
] = await Promise.all([
  supabase.auth.getUser(),
  supabase
    .from("articles")
    .select("*")
    .eq("slug", slug)
    .eq("lang", lang || 'el')
    .maybeSingle(),
]);

if (articleError) {
  return new Response(`❌ Σφάλμα Supabase: ${articleError.message}`, { status: 500 });
}

if (!article) {
  return new Response(`📭 Δεν βρέθηκε άρθρο με slug: ${slug}`, { status: 404 });
}

if (!user) {
  return new Response('🔒 Απαιτείται είσοδος', { status: 401 });
}

const pageTitle = `Επεξεργασία: ${article.title}`;
---

<Layout title={pageTitle} user={user}>
  <!-- Debug panel για σιγουριά! -->
  <div style="position: fixed; top: 0; right: 0; background: red; color: white; padding: 5px; z-index: 9999; font-size: 12px;">
    User: {user ? user.email || 'Logged in' : 'Not logged in'}
  </div>
  
  <script src="https://unpkg.com/alpinejs" defer></script>

  <div class="max-w-6xl mx-auto grid md:grid-cols-2 gap-6 p-6" x-data="editorData">
    <div class="bg-white p-6 rounded shadow">
      <h1 class="text-2xl font-bold mb-4">✏️ Επεξεργασία άρθρου</h1>
      <form @submit.prevent="save()" class="space-y-4">
        <input type="hidden" x-ref="id" value={article.id}>

        <div>
          <label class="block text-sm font-medium">Τίτλος</label>
          <input x-model="title" type="text" class="w-full border rounded px-3 py-2">
        </div>

        <div>
          <label class="block text-sm font-medium">Slug</label>
          <input x-model="slug" type="text" class="w-full border rounded px-3 py-2">
        </div>

        <div>
          <label class="block text-sm font-medium">Περίληψη</label>
          <textarea x-model="excerpt" class="w-full border rounded px-3 py-2"></textarea>
        </div>

        <div>
          <label class="block text-sm font-medium">Εικόνα (URL)</label>
          <input x-model="cover_image" type="text" class="w-full border rounded px-3 py-2">
        </div>

        <div>
          <label class="block text-sm font-medium">Περιεχόμενο</label>
          <textarea x-model="content" rows="10" class="w-full border rounded px-3 py-2 font-mono"></textarea>
        </div>

        <div class="flex items-center gap-4">
          <label class="inline-flex items-center">
            <input type="checkbox" x-model="published" class="mr-2">
            Δημοσιευμένο
          </label>

          <div>
            <label class="block text-sm">Προγραμματισμός:</label>
            <input type="datetime-local" x-model="publish_date" class="border rounded px-2 py-1">
          </div>
        </div>

        <div class="flex justify-end gap-4">
          <span x-text="status" class="text-sm text-gray-500"></span>
          <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">💾 Αποθήκευση</button>
        </div>
      </form>
    </div>

    <div class="bg-white p-6 rounded shadow space-y-4">
      <h2 class="text-lg font-semibold">🔍 Προεπισκόπηση</h2>

      <template x-if="cover_image">
        <img :src="cover_image" alt="cover" class="rounded w-full object-cover max-h-64" />
      </template>

      <h3 class="text-xl font-bold" x-text="title"></h3>

      <div class="prose prose-sm max-w-none">
        <div x-ref="preview" x-html="renderedContent"></div>
      </div>
    </div>
  </div>

  <script is:inline define:vars={{
    articleTitle: article.title || '',
    articleSlug: article.slug || '',
    articleExcerpt: article.excerpt || '',
    articleContent: article.content || '',
    articleCoverImage: article.cover_image || '',
    articlePublished: !!article.published,
    articlePublishDate: article.publish_date?.slice(0, 16) || '',
    articleLang: lang || 'el',
    articleId: article.id
  }}>
    import("https://cdn.jsdelivr.net/npm/marked/marked.min.js").then((m) => {
      window.marked = m.marked;
    });

    window.articleData = {
      title: articleTitle,
      slug: articleSlug,
      excerpt: articleExcerpt,
      content: articleContent,
      cover_image: articleCoverImage,
      published: articlePublished,
      publish_date: articlePublishDate,
      lang: articleLang,
      id: articleId
    };

    document.addEventListener('alpine:init', () => {
      Alpine.data('editorData', () => ({
        title: window.articleData.title,
        slug: window.articleData.slug,
        excerpt: window.articleData.excerpt,
        content: window.articleData.content,
        cover_image: window.articleData.cover_image,
        published: window.articleData.published === true,
        publish_date: window.articleData.publish_date,
        status: '',

        renderedContent: '',

        init() {
          this.waitForMarked().then(() => {
            this.renderMarkdown();
          });
          this.autosaveInterval = setInterval(() => this.autosave(), 15000);
        },

        waitForMarked() {
          return new Promise((resolve) => {
            const check = () => {
              if (window.marked) resolve();
              else setTimeout(check, 50);
            };
            check();
          });
        },

        renderMarkdown() {
          if (window.marked && this.content) {
            this.renderedContent = window.marked.parse(this.content);
          }
        },

        async save() {
          this.status = '⏳ Αποθήκευση...';
          await this._send();
          this.status = '✅ Αποθηκεύτηκε!';
        },

        async autosave() {
          if (document.activeElement && document.activeElement.tagName === 'TEXTAREA') return;
          this.status = '💾 Autosaving...';
          await this._send(true);
          this.status = '✔️ Autosaved';
        },

        async _send(silent = false) {
          try {
            // ----------- FIXED publish_date parsing & ISO logic -----------
            let fixedPublishDate = this.publish_date;
            if (typeof fixedPublishDate === 'string' && fixedPublishDate.length === 16) {
              fixedPublishDate = fixedPublishDate + ':00';
            }
            if (
              fixedPublishDate &&
              !fixedPublishDate.endsWith('Z') &&
              !fixedPublishDate.includes('+')
            ) {
              fixedPublishDate = new Date(fixedPublishDate).toISOString();
            }
            // ----------- END FIX -----------

            const payload = {
              id: window.articleData.id,
              title: this.title,
              slug: this.slug,
              excerpt: this.excerpt,
              content: this.content,
              cover_image: this.cover_image,
              lang: window.articleData.lang,
              published: this.published,
              publish_date: fixedPublishDate || new Date().toISOString()
            };

            console.log("PAYLOAD που πάει στο update-article:", payload);

            const response = await fetch('/api/update-article', {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              credentials: 'include',
              body: JSON.stringify(payload)
            });

            // Πάρε το response text πρώτα για debugging
            const responseText = await response.text();
            console.log('Raw response:', responseText);

            if (!response.ok) {
              let errorMessage = `HTTP ${response.status}`;
              try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
              } catch (e) {
                errorMessage = responseText || errorMessage;
              }
              throw new Error(errorMessage);
            }

            // Parse το success response
            const result = JSON.parse(responseText);
            console.log('Success response:', result);

            if (!silent) {
              this.status = '✅ Αποθηκεύτηκε επιτυχώς!';
              setTimeout(() => this.status = '', 3000);
            }

          } catch (error) {
            console.error('Save error:', error);
            this.status = `❌ Σφάλμα: ${error.message}`;
            if (!silent) {
              alert(`Σφάλμα αποθήκευσης: ${error.message}`);
            }
            setTimeout(() => {
              if (this.status.includes('❌')) {
                this.status = '';
              }
            }, 5000);
          }
        }
      }));

      Alpine.effect(() => {
        const data = Alpine.store('editorData') || document.querySelector('[x-data="editorData"]')?._x_dataStack?.[0];
        if (data?.content) {
          data.renderMarkdown();
        }
      });
    });
  </script>
</Layout>
---
import Layout from '../../../layouts/Layout.astro';
import Markdown from '../../../components/Markdown.astro';
import { getBackend } from '@/lib/backend';
import { isFsMode } from '@/lib/isFsMode';

export const prerender = false;
export const client = 'load';

const { slug, lang } = Astro.params as { slug: string; lang: string };

if (!slug || !lang) {
  return new Response(null, { status: 404, statusText: 'Invalid parameters' });
}

const backend = getBackend();

// user για κουμπί Edit
let user: { id: string } | null = null;
if (isFsMode()) {
  user = { id: 'demo-user' };
} else {
  const s = await backend.auth.getSession();
  user = s.userId ? { id: s.userId } : null;
}

// άρθρο στη συγκεκριμένη γλώσσα
const fsArticle = await backend.articles.get(slug, lang);
if (!fsArticle) {
  // αν δεν υπάρχει σε αυτή τη γλώσσα, αλλά υπάρχει άλλη, redirect εκεί
  const langs = await backend.articles.listLanguages(slug);
  const alt = langs.find((l) => l !== lang);
  if (alt) return Astro.redirect(`/${alt}/blog/${slug}`, 302);
  return Astro.redirect(`/${lang}/blog`, 302);
}

// δημοσιότητα
const nowIso = new Date().toISOString();
const isVisible =
  fsArticle.status === 'published' ||
  (fsArticle.status === 'scheduled' && (fsArticle.publishDate ?? '') <= nowIso);

if (!isVisible) {
  return Astro.redirect(`/${lang}/blog`, 302);
}

// map στα πεδία που περιμένει το template
const article = {
  id: fsArticle.id,
  slug: fsArticle.slug,
  title: fsArticle.title,
  lang: fsArticle.language ?? lang,
  excerpt: fsArticle.excerpt ?? '',
  cover_image: fsArticle.coverImage ?? '',
  publish_date: fsArticle.publishDate ?? '',
  content: fsArticle.body ?? '',
  published: fsArticle.status === 'published',
};

// εναλλακτική γλώσσα (αν υπάρχει)
const langs = await backend.articles.listLanguages(slug);
const altLang = langs.find((l) => l !== article.lang) || null;
const altArticle = altLang ? { slug: article.slug, lang: altLang } : null;
const hasAltVersion = !!altArticle;

const pageTitle = article?.title ?? 'Unknown Article';
const pageDescription =
  article?.excerpt ?? 'This article may have been moved or never existed.';
const siteUrl = import.meta.env.PUBLIC_SITE_URL || 'https://hitsnap.app';
const pageUrl = `${siteUrl}/${lang}/blog/${slug}`;
const markdown = article?.content ?? '';

function langName(l: string) {
  const m: Record<string, string> = { el: 'Greek', en: 'English', nl: 'Dutch' };
  return m[l] ?? l.toUpperCase();
}
---

<Layout
  title={pageTitle}
  lang={lang}
  key={lang}
  altArticle={altArticle}
  disableHeaderLangSwitch={true}
>
  <head slot="head">
    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:type" content="article" />
    <meta property="og:url" content={pageUrl} />
    <meta name="language" content={lang === 'el' ? 'Greek' : 'English'} />
  </head>

  <section class="max-w-3xl mx-auto py-12 px-4">
    <article>
      <h1 class="text-2xl sm:text-3xl font-bold text-black" style="font-family: 'Playfair Display', serif;">
        {article.title}
      </h1>

      {article.publish_date && (
        <p class="text-sm text-zinc-500">
          {new Date(article.publish_date).toLocaleDateString(lang === 'en' ? 'en' : 'el')}
        </p>
      )}

      {article.cover_image && (
        <img
          src={article.cover_image}
          alt="Cover image"
          class="my-6 max-h-[400px] w-auto max-w-full object-contain rounded-lg shadow"
        />
      )}

      <div class="prose prose-zinc dark:prose-invert max-w-none">
        <Markdown content={markdown} />
      </div>
    </article>

    {hasAltVersion && altArticle && (
      <div class="text-right mt-10 text-sm">
        <a
          class="text-[#50c7c2] hover:underline"
          href={`/${altArticle.lang}/blog/${altArticle.slug}`}
          target="_self"
          data-force-reload
        >
          {lang === 'el'
            ? `Διαθέσιμο και στα ${langName(altArticle.lang)} →`
            : `Also available in ${langName(altArticle.lang)} →`}
        </a>
      </div>
    )}

    <div class="mt-12 text-center mb-8">
      <a href={`/${lang}/blog`} class="inline-block text-[#50c7c2] hover:underline">
        ← {lang === 'el' ? 'Επιστροφή στα άρθρα' : 'Back to blog'}
      </a>
    </div>

    {user && article && (
      <div class="text-center">
        <a
          href={`/${article.lang}/admin/edit/${article.slug}`}
          class="inline-block bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition"
        >
          ✏️ {lang === 'el' ? 'Επεξεργασία' : 'Edit'}
        </a>
      </div>
    )}
  </section>
</Layout>

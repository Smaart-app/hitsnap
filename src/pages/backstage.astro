---
import Layout from '../layouts/Layout.astro';
import { createServerClient } from '@supabase/ssr';

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

const isProd = import.meta.env.MODE === 'production';
const isSupabaseReady = supabaseUrl && supabaseAnonKey;

let visible = [];
let tab = 'all';
let error = null;

if (isSupabaseReady) {
  const { supabase } = createServerClient(supabaseUrl, supabaseAnonKey, {
    cookies: Astro.cookies
  });

  const url = new URL(Astro.request.url);
  tab = url.searchParams.get('tab') ?? 'all';

  if (isProd) {
    const key = url.searchParams.get('key');
    const allowedKey = 'my-secret-key';
    if (key !== allowedKey) {
      return Astro.redirect('/');
    }
  }

  const { data: articles, error: supabaseError } = await supabase
    .from('articles')
    .select('*')
    .order('created_at', { ascending: false });

  error = supabaseError;
  const now = new Date().toISOString();
  visible = tab === 'drafts'
    ? articles?.filter(a => !a.published)
    : tab === 'published'
      ? articles?.filter(a => a.published && a.created_at <= now)
      : tab === 'scheduled'
        ? articles?.filter(a => a.published && a.created_at > now)
        : articles;
} else {
  error = 'Missing Supabase environment variables';
}
---

<Layout>
  <main class="max-w-3xl mx-auto py-12 px-4">
    <h1 class="text-2xl font-bold mb-4">📊 Backstage</h1>
    {error ? (
      <p class="text-red-500">⚠️ {error}</p>
    ) : (
      <p>Υπάρχουν {visible?.length ?? 0} άρθρα στην κατηγορία <strong>{tab}</strong>.</p>
    )}
  </main>
</Layout>

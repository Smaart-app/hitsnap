---
export const prerender = false;

export const getStaticPaths = async () => {
  return [];
};

import Layout from '../../../layouts/Layout.astro';
import { createServerClientWithCookies } from '../../../lib/createServerClient.ts';
import type { APIContext } from 'astro';

export async function get({ params, cookies }: APIContext) {
  const { slug } = params;

  console.log('[EDITOR] Incoming slug param:', slug);

  if (!slug) {
    console.warn('[EDITOR] Missing slug param!');
    return new Response(null, {
      status: 302,
      headers: { Location: '/404' }
    });
  }

  const supabase = createServerClientWithCookies(cookies);

  const { data: article, error } = await supabase
    .from('articles')
    .select('*')
    .eq('slug', slug)
    .single();

  console.log('[EDITOR] Supabase query result:', article);
  console.log('[EDITOR] Supabase error:', error);

  if (error || !article) {
    console.warn('[EDITOR] Article not found or Supabase error occurred');
    return new Response(null, {
      status: 302,
      headers: { Location: '/404' }
    });
  }

  return { props: { article } };
}

const { article } = Astro.props;
const isGreek = article?.lang === 'el';
---

<Layout title={`${isGreek ? 'Επεξεργασία Άρθρου' : 'Edit Article'} | Hitlift`} lang={article?.lang || 'el'}>
  <main class="max-w-6xl mx-auto px-4 py-12">
    <h1 class="text-2xl font-bold mb-6">{isGreek ? '✏️ Επεξεργασία Άρθρου' : '✏️ Edit Article'}</h1>

    <pre class="text-xs bg-zinc-100 p-2 border rounded overflow-auto max-h-64 mb-4">{JSON.stringify(article, null, 2)}</pre>

    <div id="feedback"></div>

    <div class="grid lg:grid-cols-2 gap-8">
      <form method="post" action="/api/save-article" class="space-y-4" id="articleForm">
        <input type="hidden" name="slug" value={article?.slug || ''} />

        <div>
          <label class="block mb-1 font-semibold">Τίτλος</label>
          <input type="text" name="title" class="w-full p-2 border rounded" value={article?.title || ''} required />
        </div>

        <div>
          <label class="block mb-1 font-semibold">Απόσπασμα</label>
          <textarea name="excerpt" class="w-full p-2 border rounded">{article?.excerpt || ''}</textarea>
        </div>

        <div>
          <label class="block mb-1 font-semibold">Περιεχόμενο (Markdown)</label>
          <textarea name="content" id="markdownInput" class="w-full p-2 border rounded font-mono text-sm" rows="12">
{`${article?.content || ''}`}
</textarea>
        </div>

        <div>
          <label class="block mb-1 font-semibold">Εικόνα Εξωφύλλου</label>
          <input type="url" name="cover_image" class="w-full p-2 border rounded" value={article?.cover_image || ''} />
        </div>

        <div class="flex items-center gap-4">
          <div class="w-full">
            <label class="block mb-1 font-semibold">Ημερομηνία Δημοσίευσης</label>
            <input type="datetime-local" name="publish_date" class="w-full p-2 border rounded"
              value={article?.publish_date?.slice(0, 16) || ''} />
          </div>
          <div class="w-full">
            <label class="block mb-1 font-semibold">Κατάσταση</label>
            <select name="published" class="w-full p-2 border rounded">
              <option value="true" selected={article?.published}>Ναι</option>
              <option value="false" selected={!article?.published}>Όχι</option>
            </select>
          </div>
        </div>

        <button type="submit" class="bg-[#50c7c2] text-white px-6 py-2 rounded font-semibold">
          Αποθήκευση
        </button>
      </form>

      <section class="prose prose-zinc dark:prose-invert p-4 border rounded shadow-sm overflow-auto max-h-[800px]">
        <h2 class="text-xl font-bold mb-2">{isGreek ? 'Προεπισκόπηση' : 'Preview'}</h2>
        <div id="previewImageContainer">
          {article?.cover_image && (
            <img src={article.cover_image} alt="cover" class="mb-4 rounded shadow max-h-64" />
          )}
        </div>
        <div id="markdownPreview" class="text-sm text-zinc-800 dark:text-zinc-200"></div>
        <div id="translationPreview" class="mt-8 border-t pt-4 hidden">
          <h3 class="font-semibold mb-2">{isGreek ? 'Αγγλική Μετάφραση' : 'English Translation'}</h3>
          <div id="translatedMarkdown" class="text-sm text-zinc-800 dark:text-zinc-200"></div>
        </div>
      </section>
    </div>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script type="module">
    const input = document.getElementById('markdownInput');
    const preview = document.getElementById('markdownPreview');
    const form = document.getElementById('articleForm');
    const feedback = document.getElementById('feedback');
    const previewImageContainer = document.getElementById('previewImageContainer');
    const translatedContainer = document.getElementById('translationPreview');
    const translatedMarkdown = document.getElementById('translatedMarkdown');

    const fieldsToTrack = ['title', 'excerpt', 'content'];
    let lastSavedData = {};
    let idleTimer;

    const renderPreview = () => {
      const coverImageUrl = form.cover_image?.value;
      previewImageContainer.innerHTML = coverImageUrl
        ? `<img src="${coverImageUrl}" alt="Cover Image" class="mb-4 rounded shadow max-h-64">`
        : '';
      preview.innerHTML = marked.parse(input.value || '');
    };

    const getCurrentData = () => {
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      data.published = data.published === 'true';
      data.translation_of = data.translation_of || null;
      data.publish_date = formData.get('publish_date') || null;
      return data;
    };

    const autosave = async () => {
      if (!hasChanged()) return;
      const data = getCurrentData();
      data.draft = true;

      try {
        const res = await fetch('/api/save-article', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const result = await res.json();
        if (!result.error) {
          lastSavedData = fieldsToTrack.reduce((acc, key) => {
            acc[key] = data[key];
            return acc;
          }, {});
          const now = new Date().toLocaleTimeString();
          feedback.innerHTML = `<div class="text-xs text-zinc-500 mt-2">💾 Autosaved at ${now}</div>`;
        }
      } catch (err) {
        console.warn('Autosave failed', err);
      }
    };

    const hasChanged = () => {
      const current = getCurrentData();
      return fieldsToTrack.some(field => current[field] !== lastSavedData[field]);
    };

    const resetIdleTimer = () => {
      clearTimeout(idleTimer);
      idleTimer = setTimeout(autosave, 5000);
    };

    input.addEventListener('input', () => {
      renderPreview();
      resetIdleTimer();
    });

    document.querySelectorAll('input, textarea, select').forEach((el) => {
      el.addEventListener('input', resetIdleTimer);
    });

    setInterval(autosave, 30000);
    renderPreview();
  </script>
</Layout>
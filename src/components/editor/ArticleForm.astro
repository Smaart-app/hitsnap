---
export interface Props {
  article?: any,
  user?: any,
  mode?: "new" | "edit" | "translate",
  onSuccessUrl?: string,
  lang?: string,
}
const {
  article = {},
  user = {},
  mode = "new",
  onSuccessUrl = "/el/blog",
  lang = "el",
} = Astro.props;

const languages = [
  { value: "el", label: "Ελληνικά 🇬🇷" },
  { value: "en", label: "English 🇬🇧" },
  { value: "nl", label: "Nederlands 🇳🇱" },
  { value: "fr", label: "Français 🇫🇷" },
  { value: "de", label: "Deutsch 🇩🇪" },
];

function getLocalDatetimeString(dateStr) {
  if (!dateStr) return "";
  if (/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/.test(dateStr)) {
    return dateStr;
  }
  try {
    const d = new Date(dateStr);
    const y = d.getFullYear();
    const m = String(d.getMonth() + 1).padStart(2, "0");
    const da = String(d.getDate()).padStart(2, "0");
    const h = String(d.getHours()).padStart(2, "0");
    const mi = String(d.getMinutes()).padStart(2, "0");
    return `${y}-${m}-${da}T${h}:${mi}`;
  } catch {
    return "";
  }
}

const hasArticleLang = typeof article.lang === "string" && article.lang !== "" && article.lang !== undefined;
const initial = {
  title: article.title || "",
  slug: article.slug || "",
  excerpt: article.excerpt || "",
  content: article.content || "",
  cover_image: article.cover_image || "",
  lang: hasArticleLang ? article.lang : "",
  translation_of: article.translation_of || "",
  published: article.published ? "true" : "false",
  publish_date: getLocalDatetimeString(article.publish_date),
  user_id: user?.id || "",
  id: article.id || "",
};
---

<form
  id="articleForm"
  class="space-y-4"
  method="post"
  action={mode === "edit" ? "/api/update-article" : "/api/save-article"}
  autocomplete="off"
  data-success-url={onSuccessUrl}
>
  <input type="hidden" name="user_id" id="user_id_input" value={user?.id || ''} />
  {initial.id && <input type="hidden" name="id" value={initial.id} />}

  <div>
    <label class="block font-semibold mb-1">Γλώσσα</label>
    <select name="lang" required class="w-full border rounded px-3 py-2" value={initial.lang}>
      <option value="" disabled selected={initial.lang === ""}>-- Διάλεξε γλώσσα --</option>
      {languages.map(l =>
        <option value={l.value} selected={initial.lang === l.value}>{l.label}</option>
      )}
    </select>
    <p class="text-xs text-gray-600 mt-1">
      Διάλεξε τη γλώσσα του άρθρου πριν το αποθηκεύσεις.
    </p>
  </div>

  <div>
    <label class="block font-semibold mb-1">Τίτλος</label>
    <input type="text" name="title" class="w-full border rounded px-3 py-2" value={initial.title} required />
  </div>
  <div>
    <label class="block font-semibold mb-1">Slug (URL)</label>
    <input type="text" name="slug" class="w-full border rounded px-3 py-2" value={initial.slug} required />
  </div>
  <div>
    <label class="block font-semibold mb-1">Απόσπασμα</label>
    <textarea name="excerpt" id="excerptInput" class="w-full border rounded px-3 py-2" rows="3">{initial.excerpt}</textarea>
  </div>
  <div>
    <label class="block font-semibold mb-1">Περιεχόμενο (Markdown)</label>
    <textarea name="content" id="markdownInput" class="w-full border rounded font-mono text-sm px-3 py-2" rows="12">{initial.content}</textarea>
  </div>
  <div>
    <label class="block font-semibold mb-1">Εικόνα Εξωφύλλου (URL)</label>
    <input type="text" name="cover_image" id="coverImageInput" class="w-full border rounded px-3 py-2" value={initial.cover_image} />
  </div>
  <div>
    <label class="block font-semibold mb-1">UUID Πρωτότυπου Άρθρου (αν είναι μετάφραση)</label>
    <input type="text" name="translation_of" class="w-full border rounded px-3 py-2"
      value={initial.translation_of}
      placeholder="Άσε το κενό αν είναι πρωτότυπο"
    />
    <p class="text-xs text-gray-500 mt-1">
      Συμπλήρωσε μόνο αν το άρθρο είναι μετάφραση (uuid ελληνικού/άλλου άρθρου)
    </p>
  </div>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div>
      <label class="block font-semibold mb-1">Ημερομηνία Δημοσίευσης</label>
      <input type="datetime-local" name="publish_date" class="w-full border rounded"
        value={initial.publish_date} />
    </div>
    <div>
      <label class="block font-semibold mb-1">Κατάσταση</label>
      <select name="published" class="w-full border rounded" value={initial.published}>
        <option value="false" selected={initial.published === "false"}>📝 Πρόχειρο</option>
        <option value="true" selected={initial.published === "true"}>✅ Δημοσιευμένο</option>
      </select>
    </div>
  </div>
  <div class="flex gap-4">
    <button type="submit" class="bg-green-600 text-white px-6 py-2 rounded font-semibold hover:bg-green-700 transition">
      💾 Αποθήκευση
    </button>
    <a href={onSuccessUrl} class="bg-gray-500 text-white px-6 py-2 rounded font-semibold hover:bg-gray-600 transition">
      ← Ακύρωση
    </a>
  </div>
  <div id="formError" class="text-red-600 font-semibold mt-2" style="display:none"></div>
</form>

<section class="prose prose-zinc dark:prose-invert p-4 border rounded shadow-sm mt-8 max-h-[600px] overflow-auto">
  <h2 class="text-xl font-bold mb-2">Προεπισκόπηση</h2>
  <div id="previewImageContainer">
    {initial.cover_image && (
      <img src={initial.cover_image} alt="cover" class="mb-4 rounded shadow max-h-64 w-full object-cover" id="previewCoverImage"/>
    )}
  </div>
  <div id="excerptPreview" class="text-zinc-600 mb-4"></div>
  <div id="markdownPreview" class="text-sm text-zinc-800 dark:text-zinc-200"></div>
</section>

<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script is:inline>
  // Markdown preview για excerpt
  const excerptInput = document.getElementById('excerptInput');
  const excerptPreview = document.getElementById('excerptPreview');
  function renderExcerpt(text, target) {
    if (window.marked) {
      target.innerHTML = window.marked.parse(text || "");
    }
  }
  if (excerptInput && excerptPreview) {
    excerptInput.addEventListener('input', () => renderExcerpt(excerptInput.value, excerptPreview));
    renderExcerpt(excerptInput.value, excerptPreview);
  }

  // Markdown preview για περιεχόμενο
  const input = document.getElementById('markdownInput');
  const preview = document.getElementById('markdownPreview');
  function renderMarkdown(text, target) {
    if (window.marked) {
      target.innerHTML = window.marked.parse(text || "");
    }
  }
  if (input && preview) {
    input.addEventListener('input', () => renderMarkdown(input.value, preview));
    renderMarkdown(input.value, preview);
  }

  // Preview για εικόνα εξωφύλλου
  const coverInput = document.getElementById('coverImageInput');
  const previewImageContainer = document.getElementById('previewImageContainer');
  function renderCoverImage(url) {
    if (!url) {
      previewImageContainer.innerHTML = "";
      return;
    }
    previewImageContainer.innerHTML = `<img src="${url}" alt="cover" class="mb-4 rounded shadow max-h-64 w-full object-cover" />`;
  }
  if (coverInput) {
    coverInput.addEventListener('input', () => renderCoverImage(coverInput.value));
    renderCoverImage(coverInput.value);
  }

  // AJAX submit (χωρίς refresh, εμφανίζει error αν υπάρξει)
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('articleForm');
    const formError = document.getElementById('formError');
    const onSuccessUrl = form?.getAttribute('data-success-url') || "/";
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        formError.style.display = "none";

        const formData = new FormData(form);
        const payload = {};
        formData.forEach((v, k) => payload[k] = v);

        if (payload.published) payload.published = payload.published === "true";
        Object.keys(payload).forEach(k => {
          if (payload[k] === "") payload[k] = null;
        });

        // DEBUG
        console.log("== Θα κάνω fetch στο:", form.action, "με payload:", payload);

        const res = await fetch(form.action, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });

        let result;
        try {
          result = await res.json();
        } catch {
          result = {};
        }
        console.log("== Απάντηση API:", result);

        if (res.ok && !result.error) {
          // *** ΝΕΟ: Redirect στο σωστό slug/lang ***
          if (result.article && result.article.slug && result.article.lang) {
            window.location.href = `/${result.article.lang}/admin/edit/${result.article.slug}`;
          } else {
            window.location.href = onSuccessUrl;
          }
        } else {
          formError.textContent = (result.error || "Σφάλμα αποθήκευσης. Δοκίμασε ξανά.");
          formError.style.display = "block";
          alert("Σφάλμα κατά την αποθήκευση: " + (result.error || "(κανένα error από API)"));
        }
      });
    }
  });
</script>

---
import Layout from '../../layouts/Layout.astro';

const { user, article } = Astro.props;
const lang = Astro.params.lang || 'el';
const isGreek = lang === 'el';
const isEditMode = !!article;

// Auto-select current datetime if creating new article
const defaultDateTime = isEditMode 
  ? article.publish_date 
  : new Date().toISOString().slice(0, 16);

// Page title and routing logic
const pageTitle = isEditMode 
  ? (isGreek ? `Επεξεργασία: ${article.title}` : `Edit: ${article.title}`)
  : (isGreek ? 'Δημιουργία Άρθρου' : 'Create Article');

const backUrl = isEditMode 
  ? `/${lang}/blog/${article.slug}`
  : `/${lang}/blog`;

const backText = isEditMode
  ? (isGreek ? '← Επιστροφή στο άρθρο' : '← Back to article')
  : (isGreek ? '← Επιστροφή στα άρθρα' : '← Back to blog');
---

<Layout title={`${pageTitle} | Hitlift`} lang={lang} user={user}>
  <main class="max-w-6xl mx-auto px-4 py-12">
    <a href={backUrl} class="inline-block text-sm text-[#50c7c2] hover:underline mb-4">
      {backText}
    </a>

    <h1 class="text-2xl font-bold mb-6">
      {isEditMode ? '✏️' : '📝'} {pageTitle}
    </h1>
    
    <div id="feedback"></div>

    <div class="grid lg:grid-cols-2 gap-8">
      <form id="articleForm" class="space-y-4">
        <!-- Hidden field for edit mode -->
        {isEditMode && (
          <input type="hidden" name="id" value={article.id} />
        )}

        <div>
          <label class="block mb-1 font-semibold">Slug (URL)</label>
          <input 
            type="text" 
            name="slug" 
            class="w-full p-2 border rounded" 
            value={article?.slug || ''} 
            required 
          />
        </div>

        <div>
          <label class="block mb-1 font-semibold">{isGreek ? 'Τίτλος' : 'Title'}</label>
          <input 
            type="text" 
            name="title" 
            class="w-full p-2 border rounded" 
            value={article?.title || ''} 
            required 
          />
        </div>

        <div>
          <label class="block mb-1 font-semibold">{isGreek ? 'Γλώσσα' : 'Language'}</label>
          <select name="lang" class="w-full p-2 border rounded" required>
            <option value="el" selected={article?.lang === 'el' || (!isEditMode && lang === 'el')}>🇬🇷 Ελληνικά</option>
            <option value="en" selected={article?.lang === 'en' || (!isEditMode && lang === 'en')}>🇬🇧 English</option>
            <option value="nl" selected={article?.lang === 'nl'}>🇳🇱 Nederlands</option>
            <option value="fr" selected={article?.lang === 'fr'}>🇫🇷 Français</option>
            <option value="de" selected={article?.lang === 'de'}>🇩🇪 Deutsch</option>
          </select>
        </div>

        <div>
          <label class="block mb-1 font-semibold">Translation of (article ID)</label>
          <input 
            type="text" 
            name="translation_of" 
            class="w-full p-2 border rounded" 
            placeholder="(Optional - link translations)" 
            value={article?.translation_of || ''} 
          />
        </div>

        <div>
          <label class="block mb-1 font-semibold">{isGreek ? 'Απόσπασμα' : 'Excerpt'}</label>
          <textarea 
            name="excerpt" 
            maxlength="160" 
            rows="3" 
            class="w-full p-2 border rounded" 
            placeholder={isGreek ? 'Προαιρετικό απόσπασμα...' : 'Optional excerpt...'}
          >{article?.excerpt || ''}</textarea>
        </div>

        <div>
          <label class="block mb-1 font-semibold">{isGreek ? 'Πλήρες Κείμενο (Markdown)' : 'Full Text (Markdown)'}</label>
          <textarea 
            name="content" 
            id="markdownInput" 
            rows="12" 
            class="w-full p-2 border rounded font-mono text-sm" 
            placeholder="Write using Markdown..." 
            required
          >{article?.content || ''}</textarea>
        </div>

        <div>
          <label class="block mb-1 font-semibold">{isGreek ? 'Εικόνα Εξωφύλλου (URL)' : 'Cover Image (URL)'}</label>
          <input 
            type="url" 
            name="cover_image" 
            class="w-full p-2 border rounded" 
            value={article?.cover_image || ''} 
          />
        </div>

        <div class="flex items-center justify-between gap-4">
          <div class="w-full">
            <label class="block mb-1 font-semibold">{isGreek ? 'Ημερομηνία και Ώρα Δημοσίευσης' : 'Publish Date & Time'}</label>
            <input 
              type="datetime-local" 
              name="publish_date" 
              class="w-full p-2 border rounded" 
              value={defaultDateTime}
            />
          </div>
          <div class="w-full">
            <label class="block mb-1 font-semibold">{isGreek ? 'Δημοσιευμένο' : 'Published'}</label>
            <select name="published" class="w-full p-2 border rounded">
              <option value="true" selected={article?.published === true || (!isEditMode && true)}>{isGreek ? 'Ναι' : 'Yes'}</option>
              <option value="false" selected={article?.published === false}>{isGreek ? 'Όχι' : 'No'}</option>
            </select>
          </div>
        </div>

        <div class="flex justify-between items-center mt-4">
          <button type="submit" class="bg-[#50c7c2] text-white px-6 py-2 rounded hover:bg-[#3db2b0] transition font-semibold">
            {isEditMode ? (isGreek ? 'Ενημέρωση' : 'Update') : (isGreek ? 'Αποθήκευση' : 'Save')}
          </button>
          <button type="button" id="translateBtn" class="text-sm text-[#50c7c2] hover:underline">
            {isGreek ? '➤ Μετάφρασε στα Αγγλικά' : '➤ Translate to Greek'}
          </button>
        </div>
      </form>

      <section class="prose prose-zinc dark:prose-invert p-4 border rounded shadow-sm overflow-auto max-h-[800px]">
        <h2 class="text-xl font-bold mb-2">{isGreek ? 'Προεπισκόπηση' : 'Preview'}</h2>
        <div id="previewImageContainer"></div>
        <div id="markdownPreview" class="text-sm text-zinc-800 dark:text-zinc-200"></div>
        <div id="translationPreview" class="mt-8 border-t pt-4 hidden">
          <h3 class="font-semibold mb-2">{isGreek ? 'Αγγλική Μετάφραση' : 'English Translation'}</h3>
          <div id="translatedMarkdown" class="text-sm text-zinc-800 dark:text-zinc-200"></div>
        </div>
      </section>
    </div>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script type="module" define:vars={{ isEditMode }}>
    const input = document.getElementById('markdownInput');
    const preview = document.getElementById('markdownPreview');
    const form = document.getElementById('articleForm');
    const feedback = document.getElementById('feedback');
    const previewImageContainer = document.getElementById('previewImageContainer');
    const translatedContainer = document.getElementById('translationPreview');
    const translatedMarkdown = document.getElementById('translatedMarkdown');

    const fieldsToTrack = ['slug', 'title', 'excerpt', 'content'];
    let lastSavedData = {};
    let idleTimer;

    const renderPreview = () => {
      const coverImageUrl = form.cover_image?.value;
      previewImageContainer.innerHTML = coverImageUrl
        ? `<img src="${coverImageUrl}" alt="Cover Image" class="mb-4 rounded shadow max-h-64">`
        : '';
      preview.innerHTML = marked.parse(input.value || '');
    };

    const getCurrentData = () => {
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      data.published = data.published === 'true';
      data.translation_of = data.translation_of || null;
      data.publish_date = formData.get('publish_date') || null;
      
      // Include edit mode info
      if (isEditMode) {
        data.isEdit = true;
        data.id = formData.get('id');
      }
      
      return data;
    };

    const autosave = async () => {
      if (!hasChanged()) return;
      const data = getCurrentData();
      data.draft = true;

      try {
        const endpoint = isEditMode ? '/api/update-article' : '/api/save-article';
        const res = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const result = await res.json();
        
        if (!result.error) {
          lastSavedData = fieldsToTrack.reduce((acc, key) => {
            acc[key] = data[key];
            return acc;
          }, {});
          const now = new Date().toLocaleTimeString();
          feedback.innerHTML = `<div class="text-xs text-zinc-500 mt-2">💾 Autosaved at ${now}</div>`;
        }
      } catch (err) {
        console.warn('Autosave failed', err);
      }
    };

    const hasChanged = () => {
      const current = getCurrentData();
      return fieldsToTrack.some(field => current[field] !== lastSavedData[field]);
    };

    const resetIdleTimer = () => {
      clearTimeout(idleTimer);
      idleTimer = setTimeout(autosave, 5000);
    };

    // Initialize lastSavedData with current form values for edit mode
    if (isEditMode) {
      const currentData = getCurrentData();
      lastSavedData = fieldsToTrack.reduce((acc, key) => {
        acc[key] = currentData[key];
        return acc;
      }, {});
    }

    input.addEventListener('input', () => {
      renderPreview();
      resetIdleTimer();
    });

    document.querySelectorAll('input, textarea, select').forEach((el) => {
      el.addEventListener('input', resetIdleTimer);
    });

    setInterval(autosave, 30000);
    renderPreview(); // Initial render with pre-filled content

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const body = getCurrentData();

      try {
        const endpoint = isEditMode ? '/api/update-article' : '/api/save-article';
        const res = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });
        const result = await res.json();
        
        const successMessage = isEditMode 
          ? '✅ Article updated successfully!' 
          : '✅ Article saved successfully!';
          
        feedback.innerHTML = `<div class="p-3 rounded font-semibold mb-6 ${result.error ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}">
          ${result.error ? `❌ ${result.error}` : successMessage}
        </div>`;
        
        // Optional: Redirect after successful save/update
        if (!result.error && result.article) {
          setTimeout(() => {
            window.location.href = `/${result.article.lang}/blog/${result.article.slug}`;
          }, 1500);
        }
      } catch (err) {
        feedback.innerHTML = `<div class="p-3 rounded font-semibold mb-6 bg-red-100 text-red-700">
          ❌ Unexpected error
        </div>`;
      }
    });

    // Translation logic (preserved)
    document.getElementById('translateBtn')?.addEventListener('click', async () => {
      const body = getCurrentData();
      try {
        const res = await fetch('/api/translate-article', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });
        const result = await res.json();
        if (!result.error && result.translated) {
          translatedContainer.classList.remove('hidden');
          translatedMarkdown.innerHTML = marked.parse(result.translated);
        }
      } catch (err) {
        translatedMarkdown.innerHTML = '<p class="text-red-600">❌ Translation failed.</p>';
        translatedContainer.classList.remove('hidden');
      }
    });
  </script>
</Layout>
---
import '../styles/global.css';

const title = Astro.props?.title || 'hitsnap';
let lang = Astro.props?.lang;

import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { createServerClientAstro } from '../lib/createServerClientAstro';

let user = null;

if (!lang && Astro.url) {
  const match = Astro.url.pathname.match(/^\/(\w+)\//);
  lang = match ? match[1] : 'el';
}

try {
  const supabase = createServerClientAstro(Astro.cookies);
  const result = await supabase.auth.getSession();
  user = result.session?.user || null;
} catch (err) {
  user = null;
}
---

<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content="A clean portfolio to showcase your creative lens." />

    <link rel="canonical" href={`https://hitsnap.app${Astro.url.pathname.replace(/\/$/, "")}`} />
    <link rel="alternate" hreflang="el" href="https://hitsnap.app/" />
    <link rel="alternate" hreflang="en" href="https://hitsnap.app/en" />
    <link rel="alternate" hreflang="x-default" href="https://hitsnap.app/" />

    <meta property="og:title" content="hitsnap — Capture. Frame. Express." />
    <meta property="og:description" content="A clean portfolio to showcase your creative lens." />
    <meta property="og:image" content="https://hitsnap.app/preview-og-final.png" />
    <meta property="og:image:type" content="image/png" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="1200" />
    <meta property="og:url" content={`https://hitsnap.app${Astro.url.pathname}`} />
    <meta property="og:type" content="website" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="hitsnap — Capture. Frame. Express." />
    <meta name="twitter:description" content="A clean portfolio to showcase your creative lens." />
    <meta name="twitter:image" content="https://hitsnap.app/preview-og-final.png" />

    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <link
      href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&display=swap"
      rel="stylesheet"
    />

    <slot name="head" />
  </head>

  <body class="bg-black text-white leading-relaxed relative overflow-x-visible min-h-screen dark:bg-black dark:text-white">
    <Header lang={lang} user={user} />

    <main class="relative z-10 min-h-[calc(100vh-120px)] pb-32">
      <div class="container">
        <slot />
      </div>
    </main>

    <Footer lang={lang} />

    <script is:client>
      const html = document.documentElement;
      if (
        localStorage.getItem('theme') === 'dark' ||
        (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        html.classList.add('dark');
      }

      document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('toggle-theme')?.addEventListener('click', () => {
          html.classList.toggle('dark');
          localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
        });
      });
    </script>
  </body>
</html>

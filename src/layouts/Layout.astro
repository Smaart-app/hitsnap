---
import '../styles/global.css';

const title = Astro.props?.title || 'Hitlift';
const lang = Astro.props?.lang || 'el';

import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { createServerClientReadOnly } from '../lib/createServerClient';

let user = Astro.props?.user || null;

if (!user) {
  try {
    if (Astro.request?.headers) {
      const supabase = createServerClientReadOnly(Astro.cookies);
      const result = await supabase.auth.getSession();
      user = result.session?.user || null;
    }
  } catch (err) {
    user = null;
  }
}
---

<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>

    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <link
      href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&display=swap"
      rel="stylesheet"
    />

    <slot name="head" />
  </head>

  <body class="bg-[#f4f3f0] text-[#1a1a1a] leading-relaxed relative overflow-x-visible min-h-screen">
    <!-- Debug info - Œ±œÜŒ±ŒØœÅŒµœÉŒµ Œ±œÖœÑœå ŒºŒµœÑŒ¨ -->
    <!--
    <div style="position: fixed; top: 50px; right: 0; background: blue; color: white; padding: 5px; z-index: 9999; font-size: 12px;">
      Layout User: {user ? user.email || 'Logged in' : 'Not logged in'}
    </div>
    -->
    
    <Header lang={lang} user={user} />

    <main class="relative z-10">
      <div class="container">
        <slot />
      </div>
    </main>

    <Footer lang={lang} />

    <script is:client>
      const html = document.documentElement;

      if (
        localStorage.getItem('theme') === 'dark' ||
        (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        html.classList.add('dark');
      }

      document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('toggle-theme')?.addEventListener('click', () => {
          html.classList.toggle('dark');
          localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
        });
      });
    </script>

    <script is:client type="module">
      import { createBrowserClient } from '/src/lib/createBrowserClient.js';

      document.addEventListener('DOMContentLoaded', async () => {
        try {
          const supabase = createBrowserClient();

          supabase.auth.onAuthStateChange(async (event, session) => {
            console.log('üîê Auth state changed:', event);
            if (event === 'SIGNED_IN' && session) {
              await fetch('/api/set-auth-cookie', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({
                  access_token: session.access_token,
                  refresh_token: session.refresh_token,
                }),
              });
              window.location.reload();
            }

            if (event === 'SIGNED_OUT') {
              window.location.reload();
            }
          });
        } catch (error) {
          console.error('Auth monitoring error:', error);
        }
      });
    </script>
  </body>
</html>